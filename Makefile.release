##############################################################################
# Copyright (C) 2014-2015 Synopsys Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

#
# How to use:
#
# This is a script to create prebuilt packages of GNU Toolchain
#
# 1. Checkout toolchain directory to desired branch. Create tags if needed.
#
# 2. Run "make -f Makefile.release RELEASE=<release> toolchain". If you do not
# want build-all.sh to checkout directories, then do "touch
# ../release_output/.stamp_checked_out before running makefile.  Note that
# "toolchain" target will build only toolchain prebuilts, nothing else, but it
# also doesn't have other prerequisites. Target "all" will also build IDE and
# OpenOCD, however this also requires additional preparations.
#

BUILDALLFLAGS := --disable-werror --strip --rel-rpaths --no-auto-pull \
--no-auto-checkout --config-extra '--with-python=no LDFLAGS=-static'

#
# Output artifacts
#
O := ../release_output
# Use -a when invoking tar, then we can easily change to .tar.xz if we want.
TAR_EXT := .tar.gz

# Toolchain: source tarball
TOOLS_SOURCE_CONTENTS := $(addprefix ../,binutils cgen gcc gdb newlib toolchain uClibc)
TOOLS_SOURCE_DIR := $O/arc_gnu_$(RELEASE)_sources

# Toolchain: baremetal for Linux hosts
TOOLS_ELFLE_DIR_LINUX := arc_gnu_$(RELEASE)_prebuilt_elf32_le_linux_install
TOOLS_ELFBE_DIR_LINUX := arc_gnu_$(RELEASE)_prebuilt_elf32_be_linux_install

# Toolchain: baremetal for Windows hosts
TOOLS_ELFLE_DIR_WIN := arc_gnu_$(RELEASE)_prebuilt_elf32_le_win_install
TOOLS_ELFBE_DIR_WIN := arc_gnu_$(RELEASE)_prebuilt_elf32_be_win_install

# Toolchain: linux
TOOLS_LINUXLE_700_DIR_LINUX := arc_gnu_$(RELEASE)_prebuilt_uclibc_le_arc700_linux_install
TOOLS_LINUXBE_700_DIR_LINUX := arc_gnu_$(RELEASE)_prebuilt_uclibc_be_arc700_linux_install
TOOLS_LINUXLE_HS_DIR_LINUX := arc_gnu_$(RELEASE)_prebuilt_uclibc_le_archs_linux_install
TOOLS_LINUXBE_HS_DIR_LINUX := arc_gnu_$(RELEASE)_prebuilt_uclibc_be_archs_linux_install

# IDE: vanilla Eclipse variables
ECLIPSE_VERSION := luna-SR2
ECLIPSE_VANILLA_ZIP_WIN := eclipse-cpp-$(ECLIPSE_VERSION)-win32.zip
ECLIPSE_VANILLA_TGZ_LINUX := eclipse-cpp-$(ECLIPSE_VERSION)-linux-gtk-x86_64.tar.gz
# Coma separated list
ECLIPSE_REPO := http://download.eclipse.org/releases/luna
# Coma separated list
ECLIPSE_PREREQ := org.eclipse.tm.terminal.serial,org.eclipse.tm.terminal.view
ECLIPSE_DL_LINK_BASE := http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/luna/SR2
# IDE: output related variables
IDE_INSTALL_LINUX := arc_gnu_$(RELEASE)_ide_linux_install
IDE_TGZ_LINUX := $(IDE_INSTALL_LINUX).tar.gz
IDE_PLUGINS_DIR := arc_gnu_$(RELEASE)_ide_plugins
IDE_PLUGINS_ZIP := $(IDE_PLUGINS_DIR).zip

# OpenOCD
OOCD_DIR_WIN := arc_gnu_$(RELEASE)_openocd_win_install
OOCD_DIR_LINUX := arc_gnu_$(RELEASE)_openocd_linux_install
# Should be created and checked out manually before running this Makefile.
OOCD_SRC_DIR_LINUX := ../openocd

# md5sum
MD5SUM_FILE := md5.sum

ifeq ($(RELEASE),)
$(error RELEASE variable can not be empty)
endif

#
# Human friendly aliases
#
.PHONY: checkout source-tarball elf-le-build elf-be-build elf-le elf-be all \
    windows ide openocd-win \
    openocd openocd-tar openocd-build openocd-install openocd-configure openocd-bootstrap \
    toolchain

all: $O/$(MD5SUM_FILE)
	@echo "MD5 sums:"
	@cat $<

toolchain: \
    $O/.stamp_source_tarball \
    $O/.stamp_elf_le_tarball $O/.stamp_elf_be_tarball \
    $O/.stamp_linux_le_700_tarball $O/.stamp_linux_be_700_tarball \
    $O/.stamp_linux_le_hs_tarball $O/.stamp_linux_be_hs_tarball \
    $O/.stamp_elf_le_windows_tarball $O/.stamp_elf_be_windows_tarball

$O/$(MD5SUM_FILE): \
    $O/.stamp_source_tarball \
    $O/.stamp_elf_le_tarball $O/.stamp_elf_be_tarball \
    $O/.stamp_linux_le_700_tarball $O/.stamp_linux_be_700_tarball \
    $O/.stamp_linux_le_hs_tarball $O/.stamp_linux_be_hs_tarball \
    $O/.stamp_elf_le_windows_tarball $O/.stamp_elf_be_windows_tarball \
    $O/$(OOCD_DIR_WIN).zip $O/$(OOCD_DIR_WIN).tar.gz \
    $O/.stamp_ide_linux_tar $O/$(IDE_PLUGINS_ZIP) \
    $O/$(OOCD_DIR_LINUX).tar.gz
	cd $O && md5sum *linux_install.tar.gz *sources.tar.gz *win_install.zip *plugins.zip > $@


checkout: $O/.stamp_checked_out

source-tarball: $O/.stamp_source_tarball

elf-le-build: $O/.stamp_elf_le_built

elf-be-build: $O/.stamp_elf_be_built

elf-le: $O/.stamp_elf_le_tarball

elf-be: $O/.stamp_elf_be_tarball

windows: $O/.stamp_elf_le_windows_tarball $O/.stamp_elf_be_windows_tarball

ide: $O/.stamp_ide_linux_tar $O/$(IDE_PLUGINS_ZIP)


#
# Real targets
#
$O:
	mkdir -p $@

# Checkout sources
.NOTPARALLEL: $O/.stamp_checked_out
$O/.stamp_checked_out: | $O
	./build-all.sh --auto-pull --auto-checkout --no-elf32 --no-uclibc
	touch $@

# Create source tarball
.NOTPARALLEL: $O/.stamp_source_tarball
$O/.stamp_source_tarball: $O/.stamp_checked_out
	tar --exclude-vcs -c -z -f $(TOOLS_SOURCE_DIR)$(TAR_EXT) --exclude=$O \
	    --transform="s|^|arc_gnu_$(RELEASE)_sources/|" $(TOOLS_SOURCE_CONTENTS)
	touch $@

$O/.stamp_elf_le_built: $O/.stamp_checked_out
	./build-all.sh $(BUILDALLFLAGS) --install-dir $O/$(TOOLS_ELFLE_DIR_LINUX) \
	    --no-uclibc --release-name $(RELEASE)
	touch $@

$O/.stamp_elf_be_built: $O/.stamp_checked_out
	./build-all.sh $(BUILDALLFLAGS) --install-dir $O/$(TOOLS_ELFBE_DIR_LINUX) \
	    --no-uclibc --release-name $(RELEASE) --big-endian
	touch $@

$O/.stamp_elf_le_tarball: $O/.stamp_elf_le_built
	cd $O && tar czf $(TOOLS_ELFLE_DIR_LINUX)$(TAR_EXT) $(TOOLS_ELFLE_DIR_LINUX)/
	touch $@

$O/.stamp_elf_be_tarball: $O/.stamp_elf_be_built
	cd $O && tar czf $(TOOLS_ELFBE_DIR_LINUX)$(TAR_EXT) $(TOOLS_ELFBE_DIR_LINUX)/
	touch $@

$O/.stamp_linux_le_700_built: $O/.stamp_checked_out
	./build-all.sh $(BUILDALLFLAGS) --install-dir $O/$(TOOLS_LINUXLE_700_DIR_LINUX) \
	    --no-elf32 --release-name $(RELEASE) --cpu arc700
	touch $@

$O/.stamp_linux_le_hs_built: $O/.stamp_checked_out
	./build-all.sh $(BUILDALLFLAGS) --install-dir $O/$(TOOLS_LINUXLE_HS_DIR_LINUX) \
	    --no-elf32 --release-name $(RELEASE) --cpu archs
	touch $@

$O/.stamp_linux_be_700_built: $O/.stamp_checked_out
	./build-all.sh $(BUILDALLFLAGS) --install-dir $O/$(TOOLS_LINUXBE_700_DIR_LINUX) \
	    --no-elf32 --release-name $(RELEASE) --big-endian --cpu arc700
	touch $@

$O/.stamp_linux_be_hs_built: $O/.stamp_checked_out
	./build-all.sh $(BUILDALLFLAGS) --install-dir $O/$(TOOLS_LINUXBE_HS_DIR_LINUX) \
	    --no-elf32 --release-name $(RELEASE) --big-endian --cpu archs
	touch $@

$O/.stamp_linux_le_700_tarball: $O/.stamp_linux_le_700_built
	cd $O && tar czf $(TOOLS_LINUXLE_700_DIR_LINUX)$(TAR_EXT) \
	    $(TOOLS_LINUXLE_700_DIR_LINUX)/
	touch $@

$O/.stamp_linux_le_hs_tarball: $O/.stamp_linux_le_hs_built
	cd $O && tar czf $(TOOLS_LINUXLE_HS_DIR_LINUX)$(TAR_EXT) \
	    $(TOOLS_LINUXLE_HS_DIR_LINUX)/
	touch $@

$O/.stamp_linux_be_700_tarball: $O/.stamp_linux_be_700_built
	cd $O && tar czf $(TOOLS_LINUXBE_700_DIR_LINUX)$(TAR_EXT) \
	    $(TOOLS_LINUXBE_700_DIR_LINUX)/
	touch $@

$O/.stamp_linux_be_hs_tarball: $O/.stamp_linux_be_hs_built
	cd $O && tar czf $(TOOLS_LINUXBE_HS_DIR_LINUX)$(TAR_EXT) \
	    $(TOOLS_LINUXBE_HS_DIR_LINUX)/
	touch $@

#
# Windows build
#
$O/.stamp_elf_le_windows_built: $O/.stamp_checked_out $O/.stamp_elf_le_built
	PATH=$(shell readlink -e $O/$(TOOLS_ELFLE_DIR_LINUX)/bin):$$PATH \
	     ./build-all.sh $(BUILDALLFLAGS) \
	     --install-dir $O/$(TOOLS_ELFLE_DIR_WIN) --no-uclibc --no-sim \
	     --release-name $(RELEASE) --host i686-w64-mingw32 --no-system-expat \
	     --no-elf32-gcc-stage1
	touch $@

$O/.stamp_elf_be_windows_built: $O/.stamp_checked_out $O/.stamp_elf_be_built
	# Install toolchain in the same dir as little endian
	PATH=$(shell readlink -e $O/$(TOOLS_ELFBE_DIR_LINUX))/bin:$$PATH \
	     ./build-all.sh $(BUILDALLFLAGS) \
	     --install-dir $O/$(TOOLS_ELFBE_DIR_WIN) --no-uclibc --big-endian --no-sim \
	     --release-name $(RELEASE) --host i686-w64-mingw32 --no-system-expat \
	     --no-elf32-gcc-stage1
	touch $@

$O/.stamp_elf_le_windows_tarball: $O/.stamp_elf_le_windows_built
	cd $O && tar czf $(TOOLS_ELFLE_DIR_WIN)$(TAR_EXT) $(TOOLS_ELFLE_DIR_WIN)/
	cd $O && zip -q -r $(TOOLS_ELFLE_DIR_WIN).zip $(TOOLS_ELFLE_DIR_WIN)/
	touch $@

$O/.stamp_elf_be_windows_tarball: $O/.stamp_elf_be_windows_built
	cd $O && tar czf $(TOOLS_ELFBE_DIR_WIN)$(TAR_EXT) $(TOOLS_ELFBE_DIR_WIN)/
	cd $O && zip -q -r $(TOOLS_ELFBE_DIR_WIN).zip $(TOOLS_ELFBE_DIR_WIN)/
	touch $@

#
# IDE related targets
#
$O/$(IDE_PLUGINS_ZIP): $O/$(IDE_PLUGINS_DIR)
	cd $O/$(IDE_PLUGINS_DIR) && zip -q -r ../$(IDE_PLUGINS_ZIP) *

$O/$(ECLIPSE_VANILLA_TGZ_LINUX):
	wget -nv -O $@ '$(ECLIPSE_DL_LINK_BASE)/$(ECLIPSE_VANILLA_TGZ_LINUX)&r=1'

$O/$(ECLIPSE_VANILLA_ZIP_WIN):
	wget -nv -O $@ '$(ECLIPSE_DL_LINK_BASE)/$(ECLIPSE_VANILLA_ZIP_WIN)&r=1'

$O/.stamp_ide_linux_eclipse: $O/$(ECLIPSE_VANILLA_TGZ_LINUX)
	mkdir -p $O/$(IDE_INSTALL_LINUX)
	tar xaf $< -C $O/$(IDE_INSTALL_LINUX)
	$O/$(IDE_INSTALL_LINUX)/eclipse/eclipse \
	    -application org.eclipse.equinox.p2.director \
	    -noSplash \
	    -repository $(ECLIPSE_REPO),file://$(realpath $O/$(IDE_PLUGINS_DIR)) \
	    -installIU $(ECLIPSE_PREREQ),com.arc.cdt.feature.feature.group
	# Eclipse will create a bunch of repos with local paths, that will not
	# work for end-users, hence those repos must be manually removed.
	sed -i -e "/$(subst /,_,$O)/ d" \
	    $O/$(IDE_INSTALL_LINUX)/eclipse/p2/org.eclipse.equinox.p2.engine/profileRegistry/epp.package.cpp.profile/.data/.settings/org.eclipse.equinox.p2.*
	touch $@

$O/.stamp_ide_linux_tar: \
	$O/$(OOCD_DIR_LINUX)/bin/openocd \
	$O/.stamp_ide_linux_eclipse \
	$O/.stamp_elf_be_built $O/.stamp_elf_le_built \
	$O/.stamp_linux_be_hs_built $O/.stamp_linux_le_hs_built
	cp -ad $O/$(TOOLS_ELFLE_DIR_LINUX)/* $O/$(IDE_INSTALL_LINUX)
	cp -ad $O/$(TOOLS_ELFBE_DIR_LINUX)/* $O/$(IDE_INSTALL_LINUX)
	cp -ad $O/$(TOOLS_LINUXLE_HS_DIR_LINUX)/* $O/$(IDE_INSTALL_LINUX)
	cp -ad $O/$(TOOLS_LINUXBE_HS_DIR_LINUX)/* $O/$(IDE_INSTALL_LINUX)
	mkdir $O/$(IDE_INSTALL_LINUX)/eclipse/jre
	tar xaf $O/jre-*-linux-x64.tar.gz -C $O/$(IDE_INSTALL_LINUX)/eclipse/jre \
	    --strip-components=1
	cp -ad $O/$(OOCD_DIR_LINUX)/* $O/$(IDE_INSTALL_LINUX)
	tar caf $O/$(IDE_TGZ_LINUX) -C $O $(IDE_INSTALL_LINUX)
	touch $@

#
# OpenOCD
#
openocd: $(OOCD_SRC_DIR_LINUX)/src/openocd
openocd-bootstrap: $(OOCD_SRC_DIR_LINUX)/configure
openocd-configure: $(OOCD_SRC_DIR_LINUX)/Makefile
openocd-build: $(OOCD_SRC_DIR_LINUX)/src/openocd
openocd-install: $(OOCD_DIR_LINUX)/bin/openocd
openocd-tar: $O/$(OOCD_DIR_LINUX).tar.gz
openocd: openocd-tar

$(OOCD_SRC_DIR_LINUX)/configure:
	cd $(OOCD_SRC_DIR_LINUX) && ./bootstrap

$(OOCD_SRC_DIR_LINUX)/Makefile: $(OOCD_SRC_DIR_LINUX)/configure
	cd $(OOCD_SRC_DIR_LINUX) && ./configure --enable-ftdi --disable-werror \
	    --prefix=$(abspath $O/$(OOCD_DIR_LINUX))

$(OOCD_SRC_DIR_LINUX)/src/openocd: $(OOCD_SRC_DIR_LINUX)/Makefile
	$(MAKE) -C $(OOCD_SRC_DIR_LINUX) all pdf

$O/$(OOCD_DIR_LINUX)/bin/openocd: $(OOCD_SRC_DIR_LINUX)/src/openocd
	$(MAKE) -C $(OOCD_SRC_DIR_LINUX) install install-pdf

$O/$(OOCD_DIR_LINUX).tar.gz: $O/$(OOCD_DIR_LINUX)/bin/openocd
	tar -C $O -caf $O/$(OOCD_DIR_LINUX).tar.gz $(OOCD_DIR_LINUX)/

# Make OpenOCD for Windows zip file.
openocd-win: $O/$(OOCD_DIR_WIN).zip $O/$(OOCD_DIR_WIN).tar.gz

$O/$(OOCD_DIR_WIN).zip: $O/$(OOCD_DIR_WIN)
	cd $O && zip -q -r $(OOCD_DIR_WIN).zip $(OOCD_DIR_WIN)/

$O/$(OOCD_DIR_WIN).tar.gz: $O/$(OOCD_DIR_WIN)
	tar -C $O -caf $O/$(OOCD_DIR_WIN).tar.gz $(OOCD_DIR_WIN)/

#
# Clean
#
.PHONY: clean
clean:
	-rm -rf $O
