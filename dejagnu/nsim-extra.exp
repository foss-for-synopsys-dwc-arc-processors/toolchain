# Copyright (C) 2013-2017 Synopsys Inc.

# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.          


# -----------------------------------------------------------------------------
# For nSim we need to provide some extra features to allow the nSim instance
# to be started and rebooted.


# Close the connection to nsim_gdb, which should then die.
proc nsim_close {} {
    global board_info board
    global errorInfo

    verbose "nsim_close" 3

    # Close nSim if it is running
    if {[board_info $board exists nsim_id]} {
        set nsim_id {[board_info $board nsim_id]}
        if {[catch {close -i $nsim_id}]} {
            verbose "nsim_close: failed to close $nsim_id: $errorInfo"
        }

        if {[catch {wait -i $nsim_id}]} {
            verbose "nsim_close: failed to wait for $nsim_id: $errorInfo"
        }

        unset_board_info nsim_id
    }
}


# Open a connection to nsim_gdb on a given port. Kills off any pre-existing
# nSim. Sets the netport for the board to the supplied value.

# @param[in] portnum The port number to use
proc nsim_open { portnum } {
    global board_info board env
    verbose "nsim_open $portnum" 3

    # Close any existing nSim, then spawn a new one, saving its spawn_id and
    # portnum and setting the netport.
    nsim_close
    # nSIM outputs messages to std(out|err) as it accepts new connections. This
    # output is ignored is by this script, however it seems that buffer that
    # contains output at some points stops dropping old output to make a place
    # for new one and simply overflows.  Thus sim_gdb cannot write to stream,
    # it is blocked and it stops responding to TCP connection and Dejagnu is
    # forced to restart it. I don't know a way to redirect nsim_gdb output to
    # null from Expect, so we have to use a shell to help as here.

    # Use either TCF or props file. TCF has higher priority.
    if {[info exists env(ARC_NSIM_TCF)]} {
        spawn sh -c "[board_info $board nsim_exe] -port $portnum \
            -tcf $env(ARC_NSIM_TCF) \
            [join [board_info $board nsim_flags]] >/dev/null 2>/dev/null"
    } else {
        spawn sh -c "[board_info $board nsim_exe] -port $portnum \
            -propsfile '$env(ARC_NSIM_PROPS)' \
            [join [board_info $board nsim_flags]] >/dev/null 2>/dev/null"
    }
    unset_board_info nsim_id
    set_board_info nsim_id $spawn_id
    unset_board_info nsim_port
    set_board_info nsim_port $portnum
    unset_board_info netport
    set_board_info netport ":$portnum"
}


# Reboot nSim.

# Close nSim and reopen with one larger port number. Naming of this proc is
# dictated by the debug infrastructure.

# This can be called very early on, before the board has been set up. We cheat
# and set it up if it doesn't exist.

# @param[in] connhost  The connected host (always arc-nsim here)
# @param[in] args      Any remaining args (unused here)
proc arc-nsim_reboot { connhost args } {
    global board_info board env
    verbose "arc-nsim_reboot $connhost $args" 3

    # Do we have board?
    if {![info exists board]} {
        set board $connhost
    }

    # GDB testsuite has an unfortunate trait - it reboots target after
    # recording TCP port involved. As a result if we would try to generate new
    # port number after reboot, test would fail, as it would use old TCP port
    # number.
    nsim_open [target_info nsim_port]

    return 1
}

# There are problems with GDB loading new application with `file` command, at
# least when new file has same filename as the old one. That problem is
# not-deterministic and I wasn't able to trace down the source, however I see
# that this happened between 7.5 and 7.6. To avoid troubles - restart GDB
# completely.  Note that it is known that GDB might misbehave when it connects
# to target which has already set PC and BLINK register, so to avoid possible
# issues gdbserver should be reset before disconnection. Here we rely on server
# to implement k-packet, sent by GDB on "quit" command. Another option is to
# reset registers manually or restart GDB-server completely. The latter is
# highly undesirable, because it creates huge overhead in typical Dejagnu test
# cases, which are very-very small, but there is lots of them.

# Standard gdb_comm_leave will simply disconnect from target and will reuse
# same GDB for next test.
proc gdb_comm_leave { } {
    global gdb_prompt
    verbose "ARC specific gdb_comm_leave"
    quit_gdb
}

# vim: noexpandtab sts=4 ts=8:
