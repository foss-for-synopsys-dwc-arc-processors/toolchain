# Copyright (C) 2016-2017 Synopsys Inc.

# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

# Returns string value of multilib options. Function returns
# empty string if ARC_MULTILIB_OPTIONS is not set.
proc arc_get_multilib_options {} {
    global env

    if { [info exists env(ARC_MULTILIB_OPTIONS)] } {
	if { [regexp "^-m" $env(ARC_MULTILIB_OPTIONS)] || \
	    [string length [string trim $env(ARC_MULTILIB_OPTIONS)]] == 0 } {
	    return $env(ARC_MULTILIB_OPTIONS)
	} else {
	    return "-m$env(ARC_MULTILIB_OPTIONS)"
	}
    } else {
	return ""
    }
}

proc arc_get_cflags {} {
    global env
    global tool
    global board

    # Quick exit if this is a gcc.dg/compat testsuite. Return value of
    # arc_get_cflags would be passed to both compilers in this testsuite, so
    # that will cause compilation errors in Metaware due to unknown options.
    # Instead all options should be specified via COMPAT_OPTIONS varibles in
    # site.exp.
    if { [board_info $board exists arc,is_gcc_compat_suite] &&
	[string is true -strict [board_info $board arc,is_gcc_compat_suite]] } {
	return ""
    }

    set cflags {}

    # Use cflags instead ldflags because lto tests of ld testsuite ignore
    # ldflags
    if {![info exists env(ARC_HOSTLINK_LIBRARY)]} {
        if {[board_info $board exists arc,hostlink]} {
            if {[board_info $board arc,hostlink] == "nsim"} {
                lappend cflags --specs=nsim.specs
            } elseif {[board_info $board arc,hostlink] == "metaware"} {
                lappend cflags --specs=hl.specs
            } elseif {[board_info $board arc,hostlink] == "semihost"} {
                lappend cflags --specs=semihost.specs --specs=arcv.specs \
                    -mabi=ilp32 -march=rv32im_zba_zbb_zbs_zca_zcb_zcmp_zicsr \
                    -T arcv.ld
            } else {
                lappend cflags --specs=nosys.specs
            }
        } else {
            lappend cflags --specs=nosys.specs
        }
    }

    # GCC generates improper DWARF info when frame-pointer is involved - all
    # variables in debug information are specified relatively to FP register
    # instead of a virtual frame base, hence this information is invalid in
    # prologue and epilogue. Since GDB doesn't epilogue (at least as of now),
    # some watchpoint tests fail, because they get an extra watchpoint value
    # change even though it is not a variable that has changed, by a FP
    # register in epilogue.
    if { $tool == "gdb" } {
	lappend cflags -fomit-frame-pointer
    }

    return [join $cflags]
}

# Kill GDBserver if it is running.

proc arc_gdbserver_close {} {
    global board
    global errorInfo

    verbose "arc: arc_gdbserver_close"

    if ![board_info $board exists gdbserver_id] {
	return
    }

    set gdbserver_id [board_info $board gdbserver_id]
    if [catch {close -i $gdbserver_id}] {
	verbose "openocd_close: failed to close $gdbserver_id: $errorInfo"
    }

    if [catch {wait -i $gdbserver_id}] {
	verbose "openocd_close: failed to wait for $gdbserver_id: $errorInfo"
    }

    unset_board_info gdbserver_id
}

# Start GDBserver using properties set in the board:
# arc,gdbserver_prog
# arc,gdbserver_args

proc arc_gdbserver_start { } {
    global board env
    verbose "arc_gdbserver_start"

    set bin [board_info $board arc,gdbserver_prog]
    set args [board_info $board arc,gdbserver_args]

    # Cannot use spawn without eval, because otherwise $args will be treated as
    # a single arguments instead of an argument list. I haven't found a way to
    # explode $args into a list in a way that would work with spawn. Using
    # [split $args] didn't helped.
    eval "spawn $bin $args"

    set_board_info gdbserver_id $spawn_id
}

# Start OpenOCD using properties set in the board:
# arc,openocd_prog
# arc,openocd_cfg
# arc,openocd_log (optional)
# arc,openocd_log_level (optional)

proc arc_openocd_start { } {
    global board env
    verbose "arc_openocd_start"

    set_board_info arc,gdbserver_prog [board_info $board arc,openocd_prog]

    set args "-f [board_info $board arc,openocd_cfg]"
    if [board_info $board exists arc,openocd_log] {
	append args " -l [board_info $board arc,openocd_log]"
    }
    if [board_info $board exists arc,openocd_log_level] {
	append args " -d[board_info $board arc,openocd_log_level]"
    }

    set_board_info arc,gdbserver_args $args

    set_board_info netport ":3333"

    arc_gdbserver_start
}

# vim: noexpandtab sts=4 ts=8:
