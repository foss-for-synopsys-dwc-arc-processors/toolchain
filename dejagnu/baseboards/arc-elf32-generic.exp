# Copyright (C) 2016-2017 Synopsys, Inc.

# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.


# This board specification contains generic stuff for ARC baremetal gdbserver
# targets.

# This is a list of toolchains that are supported on this board.
set_board_info target_install $target_triplet

# Load the generic configuration for this board. This will define a basic set
# of routines needed by the tool to communicate with the board. Depends on the
# tool.
load_generic_config "gdb-comm"

# Some extra procs for testing with nSim.
search_and_load_file "library file" "tool-extra.exp" ${boards_dir}
search_and_load_file "library file" "arc-common.exp" ${boards_dir}

# GDB tests require special treatment, they ignore "gdb-comm" configuration
# unless "monitor" GDB test suite configuration is loaded.
if {$tool == "gdb"} {
    load_lib "../config/monitor.exp"
}

# Don't use any hostlink (--specs=nosys.specs).
# Must be set before arc_get_cflags invocation!
set_board_info arc,hostlink "none"

# Any multilib options are set in an environment variable.
process_multilib_options [arc_get_multilib_options]

set xldflags ""
# This will require a valid memory.x file to be in the PWD!
append xldflags " -Wl,-marcv2elfx -L$::env(PWD)"

# We only support newlib on this target. We assume that all multilib
# options have been specified before we get here.
set_board_info compiler "[find_gcc]"
set_board_info cflags \
    "[libgloss_include_flags] [newlib_include_flags] [arc_get_cflags]"
set_board_info ldflags "[libgloss_link_flags] ${xldflags} [newlib_link_flags]"

# No linker script needed.
set_board_info ldscript ""

# GDB protocol to be used
set_board_info gdb_protocol "remote"

# Use 'continue' instead of 'run' when executing a test
set_board_info gdb_run_command "continue"

# Doesn't pass arguments or signals, can't return results, and doesn't do
# inferiorio.
set_board_info noargs 1
set_board_info gdb,nosignals 1
set_board_info gdb,noresults 1
set_board_info gdb,noinferiorio 1
set_board_info needs_status_wrapper ""

if {$tool == "gdb"} {
    # We use gdbserver to run applications
    set_board_info use_gdb_stub 1
    # GDB jumps to start_symbols after loading. Default value is `start'.
    set_board_info gdb,start_symbol "__start"
    set_board_info gdb,do_reload_on_run 1
    # Hardware watchpoint are not precies on ARC - they may fire few
    # instructions after ST instruction and this may skew testing when
    # there is several ST to same address consequently, as first stores may
    # get missed. Unfortunately it seems that GDB testsuite configuration
    # doesn't distinguish between hardware watchpoints and breakpoint, the
    # latter ones should work fine on ARC.
    set_board_info gdb,no_hardware_watchpoints 1
    # This duplicates the ones without 'gdb,'
    set_board_info gdb,noargs 1
    set_board_info gdb,nofileio 1
}

# vim: noexpandtab sts=4 ts=8:
