# Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software
# Foundation, Inc.
#
# Copyright (C) 2013-2015 Synopsys, Inc.
#
# Contributor: Anton Kolesov <anton.kolesov@synopsys.com>
# Contributor: Claudiu Zissulescu <Claudiu.Zissulescu@synopsys.com>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# This is a list of toolchains that are supported on this board.
set_board_info target_install ${target_triplet}

# Load the generic configuration for this board. This will define a basic set
# of routines needed by the tool to communicate with the board.
load_generic_config "sim"

# basic-sim.exp is a basic description for the standard Cygnus simulator.
load_base_board_description "basic-sim"

# Any multilib options are set in an environment variable.
process_multilib_options "$env(ARC_MULTILIB_OPTIONS)"

# We need extra procedures to determine for which cpu we simulate.
search_and_load_file "library file" "tool-extra.exp" ${boards_dir}

set xldflags "-Wl,--defsym=__DEFAULT_HEAP_SIZE=256m \
    -Wl,--defsym=__DEFAULT_STACK_SIZE=1024m"

# Set common defaults
set nsim_flags {}
lappend nsim_flags \
	-on nsim_isa_spfp \
	-on nsim_isa_dpfp \
	-on nsim_isa_atomic_option \
	-on nsim_isa_enable_timer_0 \
	-on nsim_isa_enable_timer_1

set nsim_bin "$::env(NSIM_HOME)/bin/nsimdrv"

# newlib.string/strcmp-1.c may run for around 2 minutes without Turbo on nSIM
# and a bit more under heavy load on machine.  Hence to avoid false timeouts
# limit should be more than 2 minutes.
set_board_info sim_time_limit 150

# Detect if nSIM Turbo is available and libstdc++ is being tested.  Most of the
# Dejagnu tests do not benefit from Turbo mode, because they are extremely
# small, hence they finish before Turbo can kick in.  However there is two
# certain floating point tests in libstdc++ that take quite a lot of time to
# execute with soft-FP - around 15 minutes on Xeon@3.5GHz host.  Enabling Turbo
# reduces this time to mere 1 minute.
if { $tool == "libstdc++" } {
    spawn $nsim_bin -on nsim_fast
    expect {
	"Download failed: no file name specified" {
	    verbose "nSIM Turbo is available"
	    lappend nsim_flags -on nsim_fast
	}
	default {
	    # nSIM would spit out an error message if Turbo is not supported.
	    verbose "nSIM Turbo is not available, increasing timeout"
	    set_board_info sim_time_limit 1200
	}
    }
}

# Check if nsim_download_elf_sections option is required - whether nSIM version
# is > 2015.06. If revision.txt doesn't exist - this is a private verification
# build of nSIM, so assume that this is the latest version.
set nsim_version_path "$::env(NSIM_HOME)/revision.txt"
if [file exists $nsim_version_path] {
    set nsim_version_fid [open $nsim_version_path r]
    set nsim_version_text [read $nsim_version_fid]
    close $nsim_version_fid
    regexp "Version : (\\d+)\.(\\d+)" $nsim_version_text -> \
	nsim_version_year nsim_version_month
    if { $nsim_version_year > 2015 || \
	($nsim_version_year == 2015 && $nsim_version_month > 6) } {
	# Avoid performance penalty of useless initialization of heap and stack
	# sections.
	lappend nsim_flags "-on nsim_download_elf_sections"
    }
} else {
    lappend nsim_flags "-on nsim_download_elf_sections"
}

# Hostlink library support
if { [ info exists env(ARC_HOSTLINK_LIBRARY) ] } {
    set xldflags "$xldflags -Wl,--whole-archive $env(ARC_HOSTLINK_LIBRARY) \
        -Wl,--no-whole-archive"
} else {
    # Use nSIM GNU IO hostlink, instead of a MetaWare compatible one.
    lappend nsim_flags -on nsim_emt
    set xldflags "$xldflags --specs=nsim.specs"
}

# Big-endian?
if [ string match arceb-* $target_triplet ] {
    lappend nsim_flags -on nsim_isa_big_endian
}

if { [check_target_arc700] } {
    lappend nsim_flags \
	-p nsim_isa_family=a700 \
	-on nsim_isa_sat \
	-on nsim_isa_mpy32
} elseif { [check_target_arc6xx] } {
    lappend nsim_flags \
	-p nsim_isa_family=a600 \
	-p nsim_isa_core=6 \
	-on nsim_isa_sat \
	-on nsim_isa_mult32
} elseif { [check_target_archs] } {
    lappend nsim_flags \
	-p nsim_isa_family=av2hs \
	-p nsim_isa_core=1 \
	-on nsim_isa_ll64_option \
	-p nsim_isa_mpy_option=9 \
	-p nsim_isa_div_rem_option=2 \
	-on nsim_isa_sat
} elseif { [check_target_arcem] } {
    lappend nsim_flags \
	-p nsim_isa_family=av2em \
	-p nsim_isa_core=1 \
	-p nsim_isa_mpy_option=9 \
	-p nsim_isa_div_rem_option=2 \
	-on nsim_isa_sat \
	-p nsim_isa_code_density_option=2 \
	-p nsim_isa_fpus_option=1
} else {
    perror "Unknown CPU configuration"
}

# Allow user to specify additional options, like JIT, etc.
if { [info exists env(ARC_NSIM_OPTS) ] } {
    lappend nsim_flags $env(ARC_NSIM_OPTS)
}

# Setup nSIM.
set_board_info sim "$nsim_bin [join $nsim_flags]"
# is_simulator should be set already by 'load_generic_config "sim"'. Do it here
# to be safe.
set_board_info is_simulator 1

# nsimdrv doesn't return application's exit code as it's own exit code, thus it
# is required to use status wrapper, that will print "***EXIT <number>" message.
set_board_info needs_status_wrapper 1

# We only support newlib on this target. We assume that all multilib
# options have been specified before we get here.
set_board_info compiler  "[find_gcc]"
set_board_info cflags    "[libgloss_include_flags] [newlib_include_flags]"
set_board_info ldflags   "[libgloss_link_flags] ${xldflags} [newlib_link_flags]"

# No linker script needed.
set_board_info ldscript ""

# Doesn't pass arguments or signals, can't return results, and doesn't
# do inferiorio.
set_board_info noargs 1
set_board_info gdb,nosignals 1
set_board_info gdb,noresults 1
set_board_info gdb,noinferiorio 1

# vim: noexpandtab sts=4 ts=8:
